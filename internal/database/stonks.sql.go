// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stonks.sql

package database

import (
	"context"
)

const getUserActiveStonks = `-- name: GetUserActiveStonks :many
select symbol
from stonks
where user_id = $1 and is_active = TRUE
`

func (q *Queries) GetUserActiveStonks(ctx context.Context, userID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserActiveStonks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var symbol string
		if err := rows.Scan(&symbol); err != nil {
			return nil, err
		}
		items = append(items, symbol)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subStonk = `-- name: SubStonk :exec
INSERT INTO stonks (user_id, symbol)
VALUES ($1, $2)
ON CONFLICT (user_id, symbol) 
DO UPDATE SET is_active = TRUE
`

type SubStonkParams struct {
	UserID int32
	Symbol string
}

func (q *Queries) SubStonk(ctx context.Context, arg SubStonkParams) error {
	_, err := q.db.ExecContext(ctx, subStonk, arg.UserID, arg.Symbol)
	return err
}

const unsubStonk = `-- name: UnsubStonk :exec
UPDATE stonks
SET is_active = FALSE
WHERE user_id = $1 AND symbol = $2
`

type UnsubStonkParams struct {
	UserID int32
	Symbol string
}

func (q *Queries) UnsubStonk(ctx context.Context, arg UnsubStonkParams) error {
	_, err := q.db.ExecContext(ctx, unsubStonk, arg.UserID, arg.Symbol)
	return err
}
